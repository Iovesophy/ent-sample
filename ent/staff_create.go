// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"ent-sample/ent/staff"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StaffCreate is the builder for creating a Staff entity.
type StaffCreate struct {
	config
	mutation *StaffMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (sc *StaffCreate) SetEmail(s string) *StaffCreate {
	sc.mutation.SetEmail(s)
	return sc
}

// SetRole sets the "role" field.
func (sc *StaffCreate) SetRole(i int32) *StaffCreate {
	sc.mutation.SetRole(i)
	return sc
}

// SetLastName sets the "lastName" field.
func (sc *StaffCreate) SetLastName(s string) *StaffCreate {
	sc.mutation.SetLastName(s)
	return sc
}

// SetFirstName sets the "firstName" field.
func (sc *StaffCreate) SetFirstName(s string) *StaffCreate {
	sc.mutation.SetFirstName(s)
	return sc
}

// SetGender sets the "gender" field.
func (sc *StaffCreate) SetGender(i int32) *StaffCreate {
	sc.mutation.SetGender(i)
	return sc
}

// SetPhoneNumber sets the "phoneNumber" field.
func (sc *StaffCreate) SetPhoneNumber(s string) *StaffCreate {
	sc.mutation.SetPhoneNumber(s)
	return sc
}

// SetNillablePhoneNumber sets the "phoneNumber" field if the given value is not nil.
func (sc *StaffCreate) SetNillablePhoneNumber(s *string) *StaffCreate {
	if s != nil {
		sc.SetPhoneNumber(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *StaffCreate) SetDescription(s string) *StaffCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *StaffCreate) SetNillableDescription(s *string) *StaffCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetUserId sets the "userId" field.
func (sc *StaffCreate) SetUserId(u uuid.UUID) *StaffCreate {
	sc.mutation.SetUserId(u)
	return sc
}

// Mutation returns the StaffMutation object of the builder.
func (sc *StaffCreate) Mutation() *StaffMutation {
	return sc.mutation
}

// Save creates the Staff in the database.
func (sc *StaffCreate) Save(ctx context.Context) (*Staff, error) {
	var (
		err  error
		node *Staff
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StaffCreate) SaveX(ctx context.Context) *Staff {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StaffCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StaffCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StaffCreate) check() error {
	if _, ok := sc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "email"`)}
	}
	if v, ok := sc.mutation.Email(); ok {
		if err := staff.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "email": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "role"`)}
	}
	if v, ok := sc.mutation.Role(); ok {
		if err := staff.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "role": %w`, err)}
		}
	}
	if _, ok := sc.mutation.LastName(); !ok {
		return &ValidationError{Name: "lastName", err: errors.New(`ent: missing required field "lastName"`)}
	}
	if v, ok := sc.mutation.LastName(); ok {
		if err := staff.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "lastName", err: fmt.Errorf(`ent: validator failed for field "lastName": %w`, err)}
		}
	}
	if _, ok := sc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "firstName", err: errors.New(`ent: missing required field "firstName"`)}
	}
	if v, ok := sc.mutation.FirstName(); ok {
		if err := staff.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "firstName", err: fmt.Errorf(`ent: validator failed for field "firstName": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if v, ok := sc.mutation.Gender(); ok {
		if err := staff.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "gender": %w`, err)}
		}
	}
	if v, ok := sc.mutation.PhoneNumber(); ok {
		if err := staff.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phoneNumber", err: fmt.Errorf(`ent: validator failed for field "phoneNumber": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Description(); ok {
		if err := staff.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "description": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "userId"`)}
	}
	return nil
}

func (sc *StaffCreate) sqlSave(ctx context.Context) (*Staff, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *StaffCreate) createSpec() (*Staff, *sqlgraph.CreateSpec) {
	var (
		_node = &Staff{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: staff.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staff.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := sc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: staff.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := sc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := sc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := sc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: staff.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := sc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: staff.FieldUserId,
		})
		_node.UserId = value
	}
	return _node, _spec
}

// StaffCreateBulk is the builder for creating many Staff entities in bulk.
type StaffCreateBulk struct {
	config
	builders []*StaffCreate
}

// Save creates the Staff entities in the database.
func (scb *StaffCreateBulk) Save(ctx context.Context) ([]*Staff, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Staff, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StaffMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StaffCreateBulk) SaveX(ctx context.Context) []*Staff {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StaffCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StaffCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
