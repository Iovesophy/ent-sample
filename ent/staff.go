// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ent-sample/ent/staff"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Staff is the model entity for the Staff schema.
type Staff struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Role holds the value of the "role" field.
	Role int32 `json:"role,omitempty"`
	// LastName holds the value of the "lastName" field.
	LastName string `json:"lastName,omitempty"`
	// FirstName holds the value of the "firstName" field.
	FirstName string `json:"firstName,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender int32 `json:"gender,omitempty"`
	// PhoneNumber holds the value of the "phoneNumber" field.
	PhoneNumber string `json:"phoneNumber,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId uuid.UUID `json:"userId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Staff) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case staff.FieldID, staff.FieldRole, staff.FieldGender:
			values[i] = new(sql.NullInt64)
		case staff.FieldEmail, staff.FieldLastName, staff.FieldFirstName, staff.FieldPhoneNumber, staff.FieldDescription:
			values[i] = new(sql.NullString)
		case staff.FieldUserId:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Staff", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Staff fields.
func (s *Staff) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staff.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case staff.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				s.Email = value.String
			}
		case staff.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				s.Role = int32(value.Int64)
			}
		case staff.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastName", values[i])
			} else if value.Valid {
				s.LastName = value.String
			}
		case staff.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstName", values[i])
			} else if value.Valid {
				s.FirstName = value.String
			}
		case staff.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				s.Gender = int32(value.Int64)
			}
		case staff.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phoneNumber", values[i])
			} else if value.Valid {
				s.PhoneNumber = value.String
			}
		case staff.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case staff.FieldUserId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value != nil {
				s.UserId = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Staff.
// Note that you need to call Staff.Unwrap() before calling this method if this Staff
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Staff) Update() *StaffUpdateOne {
	return (&StaffClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Staff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Staff) Unwrap() *Staff {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Staff is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Staff) String() string {
	var builder strings.Builder
	builder.WriteString("Staff(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", email=")
	builder.WriteString(s.Email)
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", s.Role))
	builder.WriteString(", lastName=")
	builder.WriteString(s.LastName)
	builder.WriteString(", firstName=")
	builder.WriteString(s.FirstName)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", s.Gender))
	builder.WriteString(", phoneNumber=")
	builder.WriteString(s.PhoneNumber)
	builder.WriteString(", description=")
	builder.WriteString(s.Description)
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", s.UserId))
	builder.WriteByte(')')
	return builder.String()
}

// Staffs is a parsable slice of Staff.
type Staffs []*Staff

func (s Staffs) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
